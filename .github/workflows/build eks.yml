name: Deploy Restaurant App EKS Project 2 # This is the name of your workflow

on: # This defines the event that triggers the workflow
  workflow_dispatch:

jobs:
  build-and-deploy: # Name of the job
    runs-on: ubuntu-latest # Specifies the runner environment
    env:
      FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

    steps: # Series of steps in the job
      # Step 1: Checkout code
      - name: Checkout code # First step: checking out the repository
        uses: actions/checkout@v3 # GitHub-provided action to checkout the code

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ID_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: eu-west-3

      - name: Install eksctl
        run: |
          curl --silent --location  "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_arm64.zip" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Create EKS Cluster
        run: |
          eksctl get cluster --name restaurant-app-cluster --region eu-west-3 || \
          eksctl create cluster -f eks-config/eks-config.yaml --wait

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Backend Service Names as Environment Variables
        id: setup_serviceName
        run: |
          echo "AUTH_IP=auth-service" >> $GITHUB_ENV
          echo "DISCOUNTS_IP=discounts-service" >> $GITHUB_ENV
          echo "ITEMS_IP=items-service" >> $GITHUB_ENV
          echo "FRONTEND_IP=frontend-service" >> $GITHUB_ENV
          echo "HAPROXY_IP=haproxy-service" >> $GITHUB_ENV

      - name: Generate HAProxy config from template
        run: |
          sed -e "s/{{AUTH_IP}}/${{ env.AUTH_IP }}/g" \
              -e "s/{{DISCOUNTS_IP}}/${{ env.DISCOUNTS_IP }}/g" \
              -e "s/{{ITEMS_IP}}/${{ env.ITEMS_IP }}/g" \
              -e "s/{{FRONTEND_IP}}/${{ env.FRONTEND_IP }}/g" \
              proxy/haproxy.cfg.template > proxy/haproxy.cfg
              
          echo "" >> proxy/haproxy.cfg

      # Step 3: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build Docker Images for all components
      - name: Build Docker Images # Building Docker images
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/backend-auth-service:latest ./backend/auth
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/backend-discounts-service:latest ./backend/discounts
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/backend-items-service:latest ./backend/items
          docker build --no-cache --build-arg REACT_APP_HAPROXY_SERVICE_URL=http://${{ env.HAPROXY_IP }} -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest ./client
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/haproxy:latest ./proxy

      # Step 5: Push Docker Images to DockerHub
      - name: Push Docker Images to DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-auth-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-discounts-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-items-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/haproxy:latest

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name restaurant-app-cluster --region eu-west-3

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s
